
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 08 23:06:08 CDT 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 08 23:06:08 CDT 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\007\000\002\045" +
    "\005\000\002\011\004\000\002\010\004\000\002\010\003" +
    "\000\002\012\003\000\002\012\004\000\002\013\004\000" +
    "\002\013\003\000\002\014\003\000\002\014\004\000\002" +
    "\015\004\000\002\015\003\000\002\016\003\000\002\016" +
    "\004\000\002\017\004\000\002\017\003\000\002\020\003" +
    "\000\002\020\004\000\002\021\004\000\002\021\003\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\027\004\000\002\030" +
    "\004\000\002\031\004\000\002\031\003\000\002\032\004" +
    "\000\002\032\003\000\002\033\005\000\002\033\004\000" +
    "\002\034\006\000\002\034\007\000\002\034\013\000\002" +
    "\034\006\000\002\034\007\000\002\034\013\000\002\034" +
    "\006\000\002\034\006\000\002\034\007\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\005\007\000\002\007\007\000\002\036\003\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\003\000\002\040\003\000\002\051\003\000" +
    "\002\051\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\047\005\000\002\047\005\000\002\047" +
    "\005\000\002\047\005\000\002\047\003\000\002\050\005" +
    "\000\002\050\004\000\002\006\012\000\002\006\013\000" +
    "\002\041\013\000\002\041\014\000\002\004\012\000\002" +
    "\004\013\000\002\042\016\000\002\042\017\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\044\004\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\004\004\004\001\002\000\004\056\324\001" +
    "\002\000\004\022\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\014\032\262\052\272\053" +
    "\264\054\271\055\263\001\002\000\004\005\012\001\002" +
    "\000\024\007\014\010\026\011\013\013\021\014\027\052" +
    "\033\053\020\054\015\055\022\001\002\000\004\027\227" +
    "\001\002\000\004\027\223\001\002\000\004\045\202\001" +
    "\002\000\026\006\uffa2\007\uffa2\010\uffa2\011\uffa2\013\uffa2" +
    "\014\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\001\002\000" +
    "\026\006\201\007\014\010\026\011\013\013\021\014\027" +
    "\052\033\053\020\054\015\055\022\001\002\000\004\045" +
    "\153\001\002\000\004\027\136\001\002\000\004\045\132" +
    "\001\002\000\026\006\uff9c\007\uff9c\010\uff9c\011\uff9c\013" +
    "\uff9c\014\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\001\002" +
    "\000\026\006\uffa4\007\uffa4\010\uffa4\011\uffa4\013\uffa4\014" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002\000\026" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\013\uff9e\014\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\001\002\000\004\027\122" +
    "\001\002\000\004\005\050\001\002\000\026\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\013\uffa3\014\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\001\002\000\026\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\013\uff9f\014\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\001\002\000\026\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\013\uffa0\014\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\001\002\000\004\045\035\001\002\000\026\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\013\uffa1\014\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\001\002\000\006\052\037\057\036\001" +
    "\002\000\006\033\uffde\046\uffde\001\002\000\006\033\uffdf" +
    "\046\uffdf\001\002\000\006\033\043\046\042\001\002\000" +
    "\006\033\045\046\046\001\002\000\006\052\037\057\036" +
    "\001\002\000\026\006\uffca\007\uffca\010\uffca\011\uffca\013" +
    "\uffca\014\uffca\052\uffca\053\uffca\054\uffca\055\uffca\001\002" +
    "\000\006\033\uffd2\046\uffd2\001\002\000\026\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\013\uffc9\014\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\001\002\000\006\052\037\057\036\001" +
    "\002\000\006\033\uffd3\046\uffd3\001\002\000\024\007\014" +
    "\010\026\011\013\013\021\014\027\052\033\053\020\054" +
    "\015\055\022\001\002\000\026\006\052\007\014\010\026" +
    "\011\013\013\021\014\027\052\033\053\020\054\015\055" +
    "\022\001\002\000\004\015\054\001\002\000\026\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\013\uff9d\014\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\001\002\000\004\027\055\001\002" +
    "\000\014\025\057\026\060\053\063\054\061\055\065\001" +
    "\002\000\012\030\uffaf\042\uffaf\043\uffaf\044\uffaf\001\002" +
    "\000\014\030\uffe1\033\uffe1\042\uffe1\043\uffe1\044\uffe1\001" +
    "\002\000\014\030\uffe0\033\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\001\002\000\026\030\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002" +
    "\000\012\030\112\042\110\043\113\044\107\001\002\000" +
    "\026\030\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\001\002\000\016\034" +
    "\075\035\100\036\077\037\101\040\074\041\073\001\002" +
    "\000\014\030\uffe2\034\066\042\uffe2\043\uffe2\044\uffe2\001" +
    "\002\000\010\025\067\026\070\055\072\001\002\000\012" +
    "\030\uffb7\042\uffb7\043\uffb7\044\uffb7\001\002\000\012\030" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\001\002\000\012\030\uffb1" +
    "\042\uffb1\043\uffb1\044\uffb1\001\002\000\012\030\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\001\002\000\012\053\uffbd\054\uffbd" +
    "\060\uffbd\061\uffbd\001\002\000\012\053\uffbc\054\uffbc\060" +
    "\uffbc\061\uffbc\001\002\000\012\053\uffc0\054\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\012\053\063\054\061\060\102\061" +
    "\103\001\002\000\012\053\uffbf\054\uffbf\060\uffbf\061\uffbf" +
    "\001\002\000\012\053\uffbb\054\uffbb\060\uffbb\061\uffbb\001" +
    "\002\000\012\053\uffbe\054\uffbe\060\uffbe\061\uffbe\001\002" +
    "\000\012\030\uffba\042\uffba\043\uffba\044\uffba\001\002\000" +
    "\012\030\uffb9\042\uffb9\043\uffb9\044\uffb9\001\002\000\012" +
    "\030\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002\000\012\030" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\001\002\000\014\025\057" +
    "\026\060\053\063\054\061\055\065\001\002\000\014\025" +
    "\uffb4\026\uffb4\053\uffb4\054\uffb4\055\uffb4\001\002\000\014" +
    "\025\uffb6\026\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000" +
    "\012\030\116\042\110\043\113\044\107\001\002\000\004" +
    "\033\114\001\002\000\014\025\uffb5\026\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\001\002\000\026\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\013\uffaa\014\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\001\002\000\014\025\057\026\060\053\063\054\061" +
    "\055\065\001\002\000\004\033\117\001\002\000\026\006" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\001\002\000\012\030\uffae\042" +
    "\uffae\043\uffae\044\uffae\001\002\000\012\030\uffad\042\uffad" +
    "\043\uffad\044\uffad\001\002\000\012\052\126\053\123\054" +
    "\124\055\127\001\002\000\004\030\uffc7\001\002\000\004" +
    "\030\uffc8\001\002\000\004\030\130\001\002\000\004\030" +
    "\uffc6\001\002\000\004\030\uffc5\001\002\000\004\033\131" +
    "\001\002\000\026\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013" +
    "\uffc4\014\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\001\002" +
    "\000\010\025\057\026\060\055\134\001\002\000\004\033" +
    "\135\001\002\000\004\033\uffe2\001\002\000\026\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\013\uffcb\014\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\001\002\000\014\025\057\026\060" +
    "\053\063\054\061\055\065\001\002\000\012\030\141\042" +
    "\110\043\113\044\107\001\002\000\012\030\146\042\110" +
    "\043\113\044\107\001\002\000\004\024\142\001\002\000" +
    "\004\005\143\001\002\000\024\007\014\010\026\011\013" +
    "\013\021\014\027\052\033\053\020\054\015\055\022\001" +
    "\002\000\026\006\145\007\014\010\026\011\013\013\021" +
    "\014\027\052\033\053\020\054\015\055\022\001\002\000" +
    "\026\006\uffac\007\uffac\010\uffac\011\uffac\013\uffac\014\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\001\002\000\004\024" +
    "\147\001\002\000\004\005\150\001\002\000\024\007\014" +
    "\010\026\011\013\013\021\014\027\052\033\053\020\054" +
    "\015\055\022\001\002\000\026\006\152\007\014\010\026" +
    "\011\013\013\021\014\027\052\033\053\020\054\015\055" +
    "\022\001\002\000\026\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\013\uffab\014\uffab\052\uffab\053\uffab\054\uffab\055\uffab\001" +
    "\002\000\010\053\157\060\154\061\156\001\002\000\016" +
    "\030\uffe4\033\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\001" +
    "\002\000\014\033\166\046\164\047\162\050\167\051\160" +
    "\001\002\000\016\030\uffe3\033\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\001\002\000\016\030\uffe5\033\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\001\002\000\014\027\uffda\053" +
    "\uffda\054\uffda\060\uffda\061\uffda\001\002\000\016\030\uffd4" +
    "\033\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000" +
    "\014\027\uffdc\053\uffdc\054\uffdc\060\uffdc\061\uffdc\001\002" +
    "\000\014\033\200\046\164\047\162\050\167\051\160\001" +
    "\002\000\014\027\uffdd\053\uffdd\054\uffdd\060\uffdd\061\uffdd" +
    "\001\002\000\012\027\171\053\157\060\154\061\156\001" +
    "\002\000\026\006\uffce\007\uffce\010\uffce\011\uffce\013\uffce" +
    "\014\uffce\052\uffce\053\uffce\054\uffce\055\uffce\001\002\000" +
    "\014\027\uffdb\053\uffdb\054\uffdb\060\uffdb\061\uffdb\001\002" +
    "\000\016\030\uffd8\033\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\001\002\000\010\053\157\060\154\061\156\001\002" +
    "\000\012\046\164\047\162\050\167\051\160\001\002\000" +
    "\014\030\176\046\164\047\162\050\167\051\160\001\002" +
    "\000\010\053\157\060\154\061\156\001\002\000\016\030" +
    "\uffd5\033\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002" +
    "\000\004\033\177\001\002\000\026\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\001\002\000\026\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\013\uffcd\014\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\001\002\000\004\002\000\001\002\000\006\054\204\060" +
    "\203\001\002\000\016\030\uffe6\033\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\001\002\000\016\030\uffe7\033\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\051\uffe7\001\002\000\014\033\210" +
    "\046\164\047\162\050\167\051\160\001\002\000\014\033" +
    "\222\046\164\047\162\050\167\051\160\001\002\000\016" +
    "\030\uffd6\033\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\001" +
    "\002\000\026\006\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1" +
    "\014\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\001\002\000" +
    "\010\027\212\054\204\060\203\001\002\000\006\054\204" +
    "\060\203\001\002\000\016\030\uffd9\033\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\001\002\000\012\046\164\047\162" +
    "\050\167\051\160\001\002\000\014\030\220\046\164\047" +
    "\162\050\167\051\160\001\002\000\006\054\204\060\203" +
    "\001\002\000\016\030\uffd7\033\uffd7\046\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\001\002\000\004\033\221\001\002\000\026" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\055\uffcf\001\002\000\026\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\013\uffd0\014\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\001\002\000\012\052\126\053\123" +
    "\054\124\055\127\001\002\000\004\030\225\001\002\000" +
    "\004\033\226\001\002\000\026\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\001\002\000\014\025\057\026\060\053\063\054\061" +
    "\055\065\001\002\000\012\030\232\042\110\043\113\044" +
    "\107\001\002\000\012\030\243\042\110\043\113\044\107" +
    "\001\002\000\004\023\233\001\002\000\004\005\234\001" +
    "\002\000\024\007\014\010\026\011\013\013\021\014\027" +
    "\052\033\053\020\054\015\055\022\001\002\000\026\006" +
    "\236\007\014\010\026\011\013\013\021\014\027\052\033" +
    "\053\020\054\015\055\022\001\002\000\030\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\012\237\013\uffa8\014\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\001\002\000\004\005\240\001" +
    "\002\000\024\007\014\010\026\011\013\013\021\014\027" +
    "\052\033\053\020\054\015\055\022\001\002\000\026\006" +
    "\242\007\014\010\026\011\013\013\021\014\027\052\033" +
    "\053\020\054\015\055\022\001\002\000\026\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\001\002\000\004\023\244\001\002\000" +
    "\004\005\245\001\002\000\024\007\014\010\026\011\013" +
    "\013\021\014\027\052\033\053\020\054\015\055\022\001" +
    "\002\000\026\006\247\007\014\010\026\011\013\013\021" +
    "\014\027\052\033\053\020\054\015\055\022\001\002\000" +
    "\030\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\250\013\uffa7" +
    "\014\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\001\002\000" +
    "\004\005\251\001\002\000\024\007\014\010\026\011\013" +
    "\013\021\014\027\052\033\053\020\054\015\055\022\001" +
    "\002\000\026\006\253\007\014\010\026\011\013\013\021" +
    "\014\027\052\033\053\020\054\015\055\022\001\002\000" +
    "\026\006\uffa5\007\uffa5\010\uffa5\011\uffa5\013\uffa5\014\uffa5" +
    "\052\uffa5\053\uffa5\054\uffa5\055\uffa5\001\002\000\010\031" +
    "\ufff0\032\ufff0\053\ufff0\001\002\000\016\005\ufffe\032\262" +
    "\052\272\053\264\054\271\055\263\001\002\000\010\031" +
    "\320\032\316\053\264\001\002\000\010\031\uffec\032\uffec" +
    "\055\uffec\001\002\000\010\031\313\032\312\055\263\001" +
    "\002\000\016\005\ufffc\032\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\001\002\000\012\052\306\053\307\054\300\055" +
    "\310\001\002\000\010\031\uffef\032\uffef\055\uffef\001\002" +
    "\000\010\031\ufff3\032\ufff3\053\ufff3\001\002\000\010\031" +
    "\ufff8\032\ufff8\052\ufff8\001\002\000\010\031\303\032\302" +
    "\052\272\001\002\000\010\031\274\032\273\054\271\001" +
    "\002\000\010\031\ufff4\032\ufff4\054\ufff4\001\002\000\010" +
    "\031\ufff7\032\ufff7\054\ufff7\001\002\000\010\031\ufffb\032" +
    "\ufffb\052\ufffb\001\002\000\004\054\300\001\002\000\004" +
    "\016\276\001\002\000\010\031\ufff5\032\ufff5\054\ufff5\001" +
    "\002\000\004\033\277\001\002\000\016\005\uffea\032\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\001\002\000\010\031" +
    "\ufff6\032\ufff6\054\ufff6\001\002\000\010\031\ufff9\032\ufff9" +
    "\052\ufff9\001\002\000\004\052\306\001\002\000\004\020" +
    "\304\001\002\000\004\033\305\001\002\000\016\005\uffeb" +
    "\032\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\001\002\000" +
    "\010\031\ufffa\032\ufffa\052\ufffa\001\002\000\010\031\ufff2" +
    "\032\ufff2\053\ufff2\001\002\000\010\031\uffee\032\uffee\055" +
    "\uffee\001\002\000\010\031\uffed\032\uffed\055\uffed\001\002" +
    "\000\004\055\310\001\002\000\004\021\314\001\002\000" +
    "\004\033\315\001\002\000\016\005\uffe8\032\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\001\002\000\004\053\307\001" +
    "\002\000\010\031\ufff1\032\ufff1\053\ufff1\001\002\000\004" +
    "\017\321\001\002\000\004\033\322\001\002\000\016\005" +
    "\uffe9\032\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\001\002" +
    "\000\016\005\ufffd\032\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\001\002\000\004\033\325\001\002\000\004\022\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\006\002\005\045\004\001\001\000\002\001" +
    "\001\000\004\011\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\260\010\254\012\264\013\265\014" +
    "\267\015\266\016\253\017\255\020\256\021\257\001\001" +
    "\000\002\001\001\000\024\004\030\005\027\006\033\007" +
    "\015\034\023\041\031\042\024\043\022\044\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\030\005\027\006\033\007\015" +
    "\034\023\041\031\042\024\043\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\040\001\001\000\002\001\001\000\004\025\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\046\001\001\000\002\001\001\000\024\004" +
    "\030\005\027\006\033\007\015\034\023\041\031\042\024" +
    "\043\022\044\050\001\001\000\022\004\030\005\027\006" +
    "\033\007\015\034\023\041\031\042\024\043\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\055\036\063\047\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\105\050\110\001\001\000\002\001\001\000\004" +
    "\037\075\001\001\000\002\001\001\000\004\051\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\104\040\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\055\036\063\047\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\055\036\063\047\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\024" +
    "\055\036\063\047\136\001\001\000\006\046\105\050\137" +
    "\001\001\000\004\046\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\030\005\027\006\033\007\015" +
    "\034\023\041\031\042\024\043\022\044\143\001\001\000" +
    "\022\004\030\005\027\006\033\007\015\034\023\041\031" +
    "\042\024\043\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\030\005\027\006\033" +
    "\007\015\034\023\041\031\042\024\043\022\044\150\001" +
    "\001\000\022\004\030\005\027\006\033\007\015\034\023" +
    "\041\031\042\024\043\052\001\001\000\002\001\001\000" +
    "\004\023\154\001\001\000\002\001\001\000\010\026\164" +
    "\030\160\032\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\173\030\174\001\001\000\002\001\001\000" +
    "\004\023\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\171\001\001\000\010\026" +
    "\173\030\160\032\172\001\001\000\006\026\173\030\174" +
    "\001\001\000\004\023\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\210\027\206\031\205\001\001" +
    "\000\006\026\215\027\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\212\001\001\000\004\022\213" +
    "\001\001\000\002\001\001\000\010\026\215\027\206\031" +
    "\214\001\001\000\006\026\215\027\216\001\001\000\004" +
    "\022\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\055\036\063\047\227\001\001\000\006\046\105" +
    "\050\230\001\001\000\004\046\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\030\005\027\006\033" +
    "\007\015\034\023\041\031\042\024\043\022\044\234\001" +
    "\001\000\022\004\030\005\027\006\033\007\015\034\023" +
    "\041\031\042\024\043\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\030\005\027\006\033\007\015" +
    "\034\023\041\031\042\024\043\022\044\240\001\001\000" +
    "\022\004\030\005\027\006\033\007\015\034\023\041\031" +
    "\042\024\043\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\030\005\027\006\033" +
    "\007\015\034\023\041\031\042\024\043\022\044\245\001" +
    "\001\000\022\004\030\005\027\006\033\007\015\034\023" +
    "\041\031\042\024\043\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\030\005\027\006\033\007\015" +
    "\034\023\041\031\042\024\043\022\044\251\001\001\000" +
    "\022\004\030\005\027\006\033\007\015\034\023\041\031" +
    "\042\024\043\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\322\012\264\013\265\014\267\015\266" +
    "\016\253\017\255\020\256\021\257\001\001\000\004\016" +
    "\316\001\001\000\002\001\001\000\004\020\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\300\001\001" +
    "\000\004\014\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA ::= OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA ::= SENTENCIA OPERACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERACIONES ::= SINO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERACIONES ::= SI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERACIONES ::= REPETIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERACIONES ::= MIENTRAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERACIONES ::= LEER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERACIONES ::= ESCRIBIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERACIONES ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SINO ::= Si Parentesis_a OP_BOOLEAN CONDICIONALES Parentesis_c Entonces Inicio SENTENCIA Fin Sino Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SINO ::= Si Parentesis_a OP_BOOLEAN Parentesis_c Entonces Inicio SENTENCIA Fin Sino Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SINO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SI ::= Si Parentesis_a OP_BOOLEAN CONDICIONALES Parentesis_c Entonces Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SI ::= Si Parentesis_a OP_BOOLEAN Parentesis_c Entonces Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SI",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // REPETIR ::= Repetir Inicio SENTENCIA Fin Hasta Parentesis_a OP_BOOLEAN CONDICIONALES Parentesis_c PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // REPETIR ::= Repetir Inicio SENTENCIA Fin Hasta Parentesis_a OP_BOOLEAN Parentesis_c PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETIR",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MIENTRAS ::= Mientras Parentesis_a OP_BOOLEAN CONDICIONALES Parentesis_c Hacer Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MIENTRAS ::= Mientras Parentesis_a OP_BOOLEAN Parentesis_c Hacer Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONDICIONALES ::= OP_LOGICO OP_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONDICIONALES ::= CONDICIONALES OP_LOGICO OP_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONALES",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP_BOOLEAN ::= CAMBIO_LOGICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_BOOLEAN",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP_BOOLEAN ::= Id_Logico IgualIgual Id_Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_BOOLEAN",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP_BOOLEAN ::= Id_Logico IgualIgual VALORES_LOGICOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_BOOLEAN",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP_BOOLEAN ::= TIPO_NUMEROS OP_RELACIONALES TIPO_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_BOOLEAN",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP_BOOLEAN ::= TIPO_NUMEROS OP_RELACIONALES CAMBIO_NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_BOOLEAN",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP_LOGICO ::= Not 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP_LOGICO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_LOGICO ::= And 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_LOGICO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALORES_LOGICOS ::= Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_LOGICOS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALORES_LOGICOS ::= Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_LOGICOS",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CAMBIO_NUMEROS ::= Num_Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_NUMEROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CAMBIO_NUMEROS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_NUMEROS",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_RELACIONALES ::= Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RELACIONALES ::= Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_RELACIONALES ::= Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_RELACIONALES ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_RELACIONALES ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_RELACIONALES ::= IgualIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_RELACIONALES",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPO_NUMEROS ::= Id_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_NUMEROS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPO_NUMEROS ::= Id_Reales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_NUMEROS",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LEER ::= Leer Parentesis_a TIPO_ID Parentesis_c PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEER",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ESCRIBIR ::= Escribir Parentesis_a TIPO_ID Parentesis_c PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCRIBIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO_ID ::= Id_Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO_ID ::= Id_String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO_ID ::= Id_Reales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO_ID ::= Id_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_ID",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION ::= Id_String Igual CAMBIO_STRING ENCADENACION PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION ::= Id_String Igual CAMBIO_STRING PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIGNACION ::= Id_Logico Igual CAMBIO_LOGICO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIGNACION ::= Id_Reales Igual CAMBIO_REAL OP_ARITMETICAS Parentesis_a CAMBIO_REAL CAMBIO_OP_R Parentesis_c PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ASIGNACION ::= Id_Reales Igual CAMBIO_REAL CAMBIO_OP_R PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIGNACION ::= Id_Reales Igual CAMBIO_REAL PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIGNACION ::= Id_Entero Igual CAMBIO_ENTERO OP_ARITMETICAS Parentesis_a CAMBIO_ENTERO CAMBIO_OP Parentesis_c PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIGNACION ::= Id_Entero Igual CAMBIO_ENTERO CAMBIO_OP PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNACION ::= Id_Entero Igual CAMBIO_ENTERO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ENCADENACION ::= Suma CAMBIO_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCADENACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENCADENACION ::= ENCADENACION Suma CAMBIO_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCADENACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CAMBIO_OP_R ::= OPERACIONES_REALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_OP_R",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAMBIO_OP_R ::= CAMBIO_OP_R OPERACIONES_REALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_OP_R",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CAMBIO_OP ::= OPERACIONES_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_OP",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CAMBIO_OP ::= CAMBIO_OP OPERACIONES_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_OP",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERACIONES_REALES ::= OP_ARITMETICAS CAMBIO_REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_REALES",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERACIONES_ENTERO ::= OP_ARITMETICAS CAMBIO_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES_ENTERO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OP_ARITMETICAS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP_ARITMETICAS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP_ARITMETICAS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP_ARITMETICAS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICAS",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CAMBIO_STRING ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_STRING",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CAMBIO_STRING ::= Id_String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_STRING",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CAMBIO_LOGICO ::= Falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_LOGICO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CAMBIO_LOGICO ::= Verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_LOGICO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CAMBIO_LOGICO ::= Id_Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_LOGICO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CAMBIO_REAL ::= Num_Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_REAL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CAMBIO_REAL ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_REAL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CAMBIO_REAL ::= Id_Reales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_REAL",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CAMBIO_ENTERO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_ENTERO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CAMBIO_ENTERO ::= Id_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CAMBIO_ENTERO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARIABLES ::= VAR_LOGICO DosPuntos Logico PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VARIABLES ::= VAR_REAL DosPuntos Real PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VARIABLES ::= VAR_ENTERO DosPuntos Entero PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARIABLES ::= VAR_STRING DosPuntos Cadena PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VAR_LOGICO ::= DEC_LOGICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_LOGICO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAR_LOGICO ::= VAR_LOGICO DEC_LOGICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_LOGICO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEC_LOGICO ::= Coma Id_Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_LOGICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEC_LOGICO ::= Id_Logico 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_LOGICO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAR_REAL ::= DEC_REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_REAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAR_REAL ::= VAR_REAL DEC_REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_REAL",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEC_REAL ::= Coma Id_Reales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_REAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEC_REAL ::= Id_Reales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_REAL",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAR_ENTERO ::= DEC_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_ENTERO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAR_ENTERO ::= VAR_ENTERO DEC_ENTERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_ENTERO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_ENTERO ::= Coma Id_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_ENTERO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_ENTERO ::= Id_Entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_ENTERO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VAR_STRING ::= DEC_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_STRING",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VAR_STRING ::= VAR_STRING DEC_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VAR_STRING",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC_STRING ::= Coma Id_String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_STRING",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DEC_STRING ::= Id_String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEC_STRING",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= DECLARACION VARIABLES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION_VARIABLES ::= Variables DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO_PROGRAMA ::= Programa Id_Programa PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO_PROGRAMA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= INICIO_PROGRAMA DECLARACION_VARIABLES Inicio SENTENCIA Fin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

